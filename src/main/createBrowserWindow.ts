import { BrowserWindow, IpcMainEvent } from "electron";
import type { MainApi, ViewType } from "../shared-types";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Create the browser window.
export const createBrowserWindow = (): BrowserWindow =>
  new BrowserWindow({
    show: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

// and load the index.html of the app.
export const loadURL = (window: BrowserWindow) => window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

export const createSecondWindow = (): Promise<BrowserWindow> => {
  const window = createBrowserWindow();

  const promise = new Promise<BrowserWindow>((resolve) => {
    // resolve promise after window is loaded
    window.webContents.once("did-finish-load", () => {
      // TODO set appOptions in the newly-created window
      resolve(window);
    });

    // and load the index.html of the window
    loadURL(window);
    //window.webContents.openDevTools();
    window.maximize();
  });

  return promise;
};

export type AppWindow = {
  mainApi: MainApi;
  window: BrowserWindow;
  openViewType: (viewType?: ViewType) => void;
};

export const appWindows = (() => {
  const instances: { [index: number]: AppWindow } = {};

  const find = (event: IpcMainEvent): AppWindow | undefined => instances[event.sender.id];
  const add = (appWindow: AppWindow): void => {
    const id = appWindow.window.webContents.id;
    instances[id] = appWindow;
    appWindow.window.on("closed", () => {
      delete instances[id];
    });
  };
  const closeAll = (mainWindow: BrowserWindow): void =>
    Object.entries(instances).forEach(([index, appWindow]) => {
      if (appWindow.window !== mainWindow) appWindow.window.close();
      delete instances[+index];
    });

  return { find, add, closeAll };
})();
